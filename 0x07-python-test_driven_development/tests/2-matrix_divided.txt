# 2-matrix_divided.txt

============================================================
This file describes the functionalities of 2-matrix_divided.txt
============================================================

# How to use add function "matrix_divided(matrix, div)"

it returns a new list
The results are rounded up to two decimal places

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]

The previous list remains unchanged

>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

It prints an error when the list contains a non int or float value and when its not two or more lists

>>> matrix = [
...     [3, "none", 8],
...     [1, 2, 3]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

it raises an error when the lists are not of equal size

>>> matrix = [
...	[3, 6, 7, 8],
...	[1, 2, 3]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

it raises an error when the second argument is 0 or not an integer/float

>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> print(matrix_divided(matrix, "none"))
Traceback (most recent call last):
TypeError: div must be a number
